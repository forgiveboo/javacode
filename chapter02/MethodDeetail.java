public class MethodDeetail {

  public static void main(String[] args) {
    // 成员方法的使用细节
    Tools t = new Tools();

    int[] arr = t.f1(3, 5);
    System.out.println("和=" + arr[0]);
    System.out.println("差=" + arr[1]);

    t.f2();
    t.f3();
  }
}

class Tools {
  // 关于返回值：
  // 1. 一个方法最多只能有一个返回值
  // 当我们需要返回多个结果时 可以使用数组类型作为返回值
  public int[] f1(int num1, int num2) {
    int sum = num1 + num2;
    int cha = num1 - num2;
    int[] arr = {sum, cha};
    return arr;
  }

  // 2. 返回类型可以是任意类型 包括基本数据类型和引用数据类型
  // 上面f1这个方法就是返回了一个引用数据类型
  // 3. 如果方法要求有返回值 那么方法的最后一个语句必须是 return 数据
  // 且return后面的数据的数据类型必须和返回值类型一致或可以进行自动类型转换
  // 4. 如果方法没有返回值 即返回类型为void 那么就不要写return语句了
  // 5. 方法名要采用驼峰法 并且要见名知义

  // 关于形参列表：
  // 1. 一个方法可以没有形参 也可以有多个形参
  // 2. 形参的数据类型可以是基本数据类型也可以是引用数据类型
  // 3. 在调用有形参的方法时
  // （1）必须传入形参列表中对应的数据类型（或可以进行自动转换的类型） 且位置一一对应
  // 比如形参列表中的数据类型分别是int double
  // 那么在调用方法时 传入的参数的类型也必须是int double 或是可以进行自动转换的类型
  // （2）方法形参列表中定义了多少个形参 在调用方法时就得传入多少参数
  // 4. 方法定义时的参数叫形参 方法调用时传入的参数叫实参

  // 关于方法体：
  // 1. 方法体里是Java语句 用于处理某个问题
  // 2. 要注意的是 方法体里面不能嵌套方法体

  // 关于方法调用：
  // 1. 同一个类中的方法可以直接调用 不需要创建对象来调用
  public void f2() {
    int[] arr = f1(3, 5);
    System.out.println("方法f1被调用");
  }

  // 2. 跨类调用方法必须用对象名来进行调用
  public void f3() {
    // 假设这里我们需要调用A类中的sayOk方法
    // (1)需要先创建一个方法所在类的对象
    A a = new A();
    // (2)_使用对象调用
    a.sayOk();
    System.out.println("A类中的方法sayOk被调用");
  }
}

class A {
  public void sayOk() {
    System.err.println("sayOK");
  }
}
// 这里有个编程习惯
// 就是main方法中就不要写具体的业务代码了
// 把每个业务都封装到类中的方法里
// 然后在main方法中通过对象的方式来调用成员方法
// 对于一个类来说
// 属性就封装到属性里面
// 业务逻辑就封装到方法里面
// 不要出现零散的代码语句
